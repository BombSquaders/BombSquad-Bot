# Use this file if you want to enable moderator commands in bot

import discord
from discord.ext import commands
import asyncio


class Mod(commands.Cog):
    """Commands for moderators in a guild."""

    def __init__(self, bot):
        self.bot = bot

    @staticmethod
    async def get_ban(ctx, name_or_id):
        """Get a ban in the guild."""
        for ban in await ctx.guild.bans():
            if name_or_id.isdigit():
                if ban.user.id == int(name_or_id):
                    return ban
            if str(ban.user).lower().startswith(name_or_id.lower()):
                return ban

    @commands.command()
    @commands.has_permissions(kick_members=True)
    @commands.bot_has_permissions(kick_members=True)
    async def kick(self, ctx, member: discord.Member, *, reason=None):
        """Kick a member from the guild"""
        await ctx.guild.kick(member, reason=reason)
        await ctx.send(f'Done. {member.name} was kicked, reason: `{str(reason)}`.')
        await member.send(f"You were kicked from {ctx.guild.name}, reason: `{str(reason)}`")

    @commands.command()
    @commands.has_permissions(ban_members=True)
    @commands.bot_has_permissions(ban_members=True)
    async def ban(self, ctx, member: discord.Member, *, reason=None):
        """Ban a member from the guild"""
        await ctx.guild.ban(member, reason=reason)
        await ctx.send(f'Done. {member.name} was banned for reason: `{reason}`.')
        await member.send(f"You were banned from {ctx.guild.name}, reason: `{str(reason)}`")

    @commands.command()
    @commands.has_permissions(ban_members=True)
    @commands.bot_has_permissions(ban_members=True)
    async def unban(self, ctx, name_or_id, *, reason=None):
        """Unban a member from the guild"""
        ban = await self.get_ban(ctx, name_or_id)
        if not ban:
            return await ctx.send('No user found.')
        await ctx.guild.unban(ban.user, reason=reason)
        await ctx.send(f'Unbanned *{ban.user.mention}* from the server, reason: `{reason}`.')
        await ban.user.send(f"You were unbanned from {ctx.guild.name}, reason: `{str(reason)}`")

    @commands.command()
    @commands.has_permissions(ban_members=True)
    @commands.bot_has_permissions(ban_members=True)
    async def softban(self, ctx, member: discord.Member, *, reason=None):
        """Kicks a members and deletes their messages."""
        await member.ban(reason=f'Softban - {reason}')
        await member.unban(reason='Softban unban.')
        await ctx.send(f'Done. {member.name} was softbanned, reason: `{reason}`.')
        await member.send(f"You were softbanned from {ctx.guild.name}, reason: `{str(reason)}`")

    @commands.command()
    @commands.has_permissions(ban_members=True)
    @commands.bot_has_permissions(ban_members=True)
    async def hackban(self, ctx, user_id: int, *, reason=None):
        """Bans a user that is currently not in the server.
        Only accepts user IDs.
        """
        await ctx.guild.ban(discord.Object(id=user_id), reason=reason)
        await ctx.send(f'*{self.bot.get_user(user_id)}* just got hackbanned!, reason: `{reason}`')

    @commands.command()
    @commands.has_permissions(mute_members=True)
    @commands.bot_has_permissions(mute_members=True)
    async def mute(self, ctx, user: discord.Member, time: int = 15):
        """Mute a member in the guild"""
        secs = time * 60
        for channel in ctx.guild.channels:
            if isinstance(channel, discord.TextChannel):
                await ctx.channel.set_permissions(user, send_messages=False)
            elif isinstance(channel, discord.VoiceChannel):
                await channel.set_permissions(user, connect=False)
        await ctx.send(f"{user.mention} has been muted for {time} minutes.")
        await asyncio.sleep(secs)
        for channel in ctx.guild.channels:
            if isinstance(channel, discord.TextChannel):
                await ctx.channel.set_permissions(user, send_messages=None)
            elif isinstance(channel, discord.VoiceChannel):
                await channel.set_permissions(user, connect=None)
        await ctx.send(f'{user.mention} has been unmuted from the guild.')

    @commands.command()
    @commands.has_permissions(mute_members=True)
    @commands.bot_has_permissions(mute_members=True)
    async def unmute(self, ctx, user: discord.Member):
        """Unmute a member in the guild"""
        for channel in ctx.guild.channels:
            if isinstance(channel, discord.TextChannel):
                await ctx.channel.set_permissions(user, send_messages=None)
            elif isinstance(channel, discord.VoiceChannel):
                await channel.set_permissions(user, connect=None)
        await ctx.send(f'{user.mention} has been unmuted from the guild.')

    @commands.command()
    @commands.has_permissions(kick_members=True)
    @commands.bot_has_permissions(kick_members=True)
    async def warn(self, ctx, user: discord.Member, *, reason: str):
        """Warn a member via DMs"""
        warning = f'You have been warned in **{ctx.guild}** by **{ctx.author}** for {reason}'
        if not reason:
            warning = f'You have been warned in **{ctx.guild}** by **{ctx.author}**'
        try:
            await user.send(warning)
        except discord.Forbidden:
            return await ctx.send('The user has disabled DMs for this guild or blocked the bot.')
        finally:
            await ctx.send(f'**{user}** has been **warned**')

    @commands.command(aliases=["clear"])
    @commands.has_permissions(manage_messages=True)
    @commands.bot_has_permissions(manage_messages=True)
    async def purge(self, ctx, messages: int):
        """Delete messages a certain number of messages from a channel."""
        if messages > 99:
            messages = 99
        await ctx.channel.purge(limit=messages + 1)
        await ctx.send(f'{messages} messages deleted. ðŸ‘Œ', delete_after=3)

    @commands.group(invoke_without_command=True, aliases=["custom_emoji"])
    @commands.has_permissions(manage_emojis=True)
    @commands.bot_has_permissions(manage_emojis=True)
    async def emoji(self, ctx):
        """Create or delete a custom emoji for your guild."""
        await ctx.send(f"Usage: `{ctx.prefix}emoji <option>.\n"
                       f"Available options are:"
                       f"i) `create` to create a custom emoji for this guild.\n"
                       f"ii) `delete` to delete a custom emoji from this guild.")

    @emoji.command()
    async def create(self, ctx):
        """Create a custom emoji for your guild."""
        await ctx.send("Send the image for emoji.")

        def msg(message):
            return message.author == ctx.author and message.channel == ctx.message.channel

        image = await self.bot.wait_for("message", check=msg)
        image = await image.attachments[0].read()
        await ctx.send("Send the name for emoji in 120 seconds.")
        try:
            name = await self.bot.wait_for("message", check=msg, timeout=120.0)
        except asyncio.TimeoutError:
            return await ctx.send("You took more than 120 seconds.")
        name = str(name.content)
        await ctx.send("Now mention the roles who can access the emoji, use `@everyone` if everyone can.")
        roles = await self.bot.wait_for("message", check=msg)
        if str(roles.content) == "@everyone":
            roles = None
        else:
            roles_ids = [(int(a.strip("<@&").strip(">"))) for a in str(roles.content).split(" ")]
            roles = []
            for i in roles_ids:
                try:
                    roles.append(discord.utils.get(ctx.guild.roles, id=int(i)))
                except discord.NotFound:
                    continue
        await ctx.send("Now send the reason for adding this emoji.")
        reason = await self.bot.wait_for("message", check=msg)
        e = await ctx.guild.create_custom_emoji(name=name, image=image, roles=roles, reason=(str(reason.content)))
        m = await ctx.send("Ohk, emoji added successfully.")
        await m.add_reaction(e)

    @emoji.command()
    async def delete(self, ctx, emoji: discord.Emoji, *, reason=None):
        """Delete a custom emoji from your guild."""
        await emoji.delete(reason=reason)
        await ctx.send("That custom emoji has been deleted successfully, reason:"
                       f"{str(reason)}")


def setup(bot):
    bot.add_cog(Mod(bot))
